# Generate CARoot private key 
openssl genrsa -aes256 -out MyAzureVPN.key 2048
# Generate a CARoot certificate valid for 10 years
openssl req -x509 -sha256 -new -key MyAzureVPN.key \
-out MyAzureVPN.cer -days 3650 -subj /CN=”MyAzureVPN”

# Generate a certificate request
openssl genrsa -out client1Cert.key 2048
openssl req -new -out client1Cert.req -key client1Cert.key \
-subj /CN="MyAzureVPN"
# Generate a certificate from the certificate request and sign it \
as the CA that you are.
openssl x509 -req -sha256 -in client1Cert.req -out client1Cert.cer \
-CAkey MyAzureVPN.key -CA MyAzureVPN.cer -days 1800 \
-CAcreateserial -CAserial serial
# Pack key and certificate in a .pfx(pkcs12 format)
openssl pkcs12 -export -out client1Cert.pfx -inkey client1Cert.key \
-in client1Cert.cer -certfile MyAzureVPN.cer




az aks get-credentials -g test-rg -n test-aks

az aks command invoke \
  --resource-group test-rg \
  --name test-aks \
  --command "helm uninstall glue"

az aks command invoke \
  --resource-group test-rg \
  --name test-aks \
  --command "helm install glue glue" \
  --file .

az aks command invoke \
  --resource-group test-rg \
  --name test-aks \
  --command "kubectl get pods"

az aks command invoke \
  --resource-group test-rg \
  --name test-aks \
  --command "kubectl get svc"

  NSG >> Document >> Terraform >> Ingress






SubnetID=$(az network vnet subnet list \
  --resource-group test-rg \
  --vnet-name vnet-aks \
  --query "[?name=='default'].id" \
  --output tsv)


Location=$(az group list \
  --query "[?name=='test-rg'].location" \
  --output tsv)


az aks create \
  -g test-rg \
  -n test-aks \
  --kubernetes-version 1.23.12 \
  --location $Location \
  --nodepool-name agentpool \
  --node-count 2 \
  --node-vm-size Standard_DS2_v2 \
  --vnet-subnet-id $SubnetID \
  --load-balancer-sku Standard \
  --network-plugin azure \
  --network-policy calico \
  --service-cidr 10.1.0.0/16 \
  --dns-name-prefix testpaksdns \
  --dns-service-ip 10.1.0.10 \
  --docker-bridge-address 172.17.0.1/16 \
  --enable-cluster-autoscaler \
  --max-count 2 \
  --min-count 1 \
  --enable-managed-identity \
  --enable-private-cluster \
  --no-ssh-key







To attach aks to acr
  az aks update -n test-aks -g test-rg --attach-acr myacr023


To add docker 
  sudo usermod -a -G docker azureuser
  grep docker /etc/group
  newgrp docker

ACR Login
  az acr login -n myacr023
  docker pull mcr.microsoft.com/hello-world
  docker tag mcr.microsoft.com/hello-world "myacr023.azurecr.io/hello-world:v1.0"
  docker push "myacr023.azurecr.io/hello-world:v1.0"

  az acr import -n myacr023 --source mcr.microsoft.com/oss/nginx/nginx:1.21.4 --image nginx:1.21.4

  az acr repository list -n myacr023

  kubectl run nginx --image="myacr023.azurecr.io/nginx:1.21.4"
  kubectl get pods


SP ACR

ACR_NAME="myacr221"
SERVICE_PRINCIPAL_NAME="acrsp"

ACR_REGISTRY_ID=$(az acr show \
  --name $ACR_NAME \
  --query "id" \
  --output tsv)

PASSWORD=$(az ad sp create-for-rbac \
  --name $SERVICE_PRINCIPAL_NAME \
  --scopes $ACR_REGISTRY_ID \
  --role acrpull \
  --query "password" \
  --output tsv)


  1234567@useR
  http://17.2.1.6/sample/index?name=Talha