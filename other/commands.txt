# Generate CARoot private key 
openssl genrsa -aes256 -out MyAzureVPN.key 2048
# Generate a CARoot certificate valid for 10 years
openssl req -x509 -sha256 -new -key MyAzureVPN.key \
-out MyAzureVPN.cer -days 3650 -subj /CN=”MyAzureVPN”

# Generate a certificate request
openssl genrsa -out client1Cert.key 2048
openssl req -new -out client1Cert.req -key client1Cert.key \
-subj /CN="MyAzureVPN"
# Generate a certificate from the certificate request and sign it \
as the CA that you are.
openssl x509 -req -sha256 -in client1Cert.req -out client1Cert.cer \
-CAkey MyAzureVPN.key -CA MyAzureVPN.cer -days 1800 \
-CAcreateserial -CAserial serial
# Pack key and certificate in a .pfx(pkcs12 format)
openssl pkcs12 -export -out client1Cert.pfx -inkey client1Cert.key \
-in client1Cert.cer -certfile MyAzureVPN.cer




az aks get-credentials -g test-rg -n test-aks

az aks command invoke \
  --resource-group test-rg \
  --name test-aks \
  --command "helm uninstall glue"

az aks command invoke \
  --resource-group test-rg \
  --name test-aks \
  --command "helm install springboot helm" \
  --file .

az aks command invoke \
  --resource-group aks-rg \
  --name aks-poc \
  --command "helm upgrade -f values.yaml -f values.yaml springboot ." \
  --file .

az aks command invoke \
  --resource-group test-rg \
  --name test-aks \
  --command "kubectl get pods"

az aks command invoke \
  --resource-group test-rg \
  --name test-aks \
  --command "kubectl get svc"

  NSG >> Document >> Terraform >> Ingress






SubnetID=$(az network vnet subnet list \
  --resource-group test-rg \
  --vnet-name vnet-aks \
  --query "[?name=='default'].id" \
  --output tsv)


Location=$(az group list \
  --query "[?name=='test-rg'].location" \
  --output tsv)


az aks create \
  -g test-rg \
  -n test-aks \
  --kubernetes-version 1.23.12 \
  --location $Location \
  --nodepool-name agentpool \
  --node-count 2 \
  --node-vm-size Standard_DS2_v2 \
  --vnet-subnet-id $SubnetID \
  --load-balancer-sku Standard \
  --network-plugin azure \
  --network-policy calico \
  --service-cidr 10.1.0.0/16 \
  --dns-name-prefix testpaksdns \
  --dns-service-ip 10.1.0.10 \
  --docker-bridge-address 172.17.0.1/16 \
  --enable-cluster-autoscaler \
  --max-count 2 \
  --min-count 1 \
  --enable-managed-identity \
  --enable-private-cluster \
  --no-ssh-key







To attach aks to acr
  az aks update -n test-aks -g test-rg --attach-acr myacr023


To add docker 
  sudo usermod -a -G docker azureuser
  grep docker /etc/group
  newgrp docker

ACR Login
  az acr login -n myacr023
  docker pull mcr.microsoft.com/hello-world
  docker tag mcr.microsoft.com/hello-world "myacr023.azurecr.io/hello-world:v1.0"
  docker push "myacr023.azurecr.io/hello-world:v1.0"

  az acr import -n myacr023 --source mcr.microsoft.com/oss/nginx/nginx:1.21.4 --image nginx:1.21.4

  az acr repository list -n myacr023

  kubectl run nginx --image="myacr023.azurecr.io/nginx:1.21.4"
  kubectl get pods


SP ACR

ACR_NAME="myacr221"
SERVICE_PRINCIPAL_NAME="acrsp"

ACR_REGISTRY_ID=$(az acr show \
  --name $ACR_NAME \
  --query "id" \
  --output tsv)

PASSWORD=$(az ad sp create-for-rbac \
  --name $SERVICE_PRINCIPAL_NAME \
  --scopes $ACR_REGISTRY_ID \
  --role acrpull \
  --query "password" \
  --output tsv)


  1234567@useR
  http://17.2.1.6/sample/index?name=Demo

  az aks update --enable-blob-driver -n aks-poc -g aks-rg

  kubectl exec -it nginx-blob -- df -h

  kubectl exec --stdin --tty nginx-blob -- sh

  kubectl create secret generic azure-secret --from-literal azurestorageaccountname=myblob221 --from-literal azurestorageaccountkey="t3XBr1HrXSIRmAEq/gLQBCmBD17KOvfe8TdIWgD3vXmxWY6ntj1B/8MDYeYWNE3LjRUSqFA88BeD+AStU/9UQQ==" --type=Opaque


##encode 64bit
  echo -n 'my-string' | base64
  echo -n 'bXktc3RyaW5n' | base64 --decode

##yaml checker
  https://www.yamllint.com/


##self sign tls cert
  openssl req \
    -x509 \
    -newkey rsa:4096 \
    -sha256 \
    -nodes \
    -keyout tls.key \
    -out tls.crt \
    -subj "/CN=app.internal.com" \
    -days 365 

----Other way
  openssl genrsa -out key.pem 2048
  openssl req -new -sha256 -key key.pem -out csr.csr
  openssl req -x509 -sha256 -days 365 -key key.pem -in csr.csr -out certificate.pem
  openssl pkcs12 -export -inkey key.pem -in certificate.pem -out certificate.pfx
  //optional
  openssl x509 -inform PEM -in certificate.pem -outform DER -out certificate.cer
  openssl x509 -noout -fingerprint -sha1 -inform dec -in certificate.cer

  //convert pem to pfx
  openssl pkcs12 -export -out certificate.pfx -inkey privateKey.key -in certificate.crt

  //convert pem to crt
  https://stackoverflow.com/questions/13732826/convert-pem-to-crt-and-key
  openssl x509 -outform der -in your-cert.pem -out your-cert.crt
  //convert pem to key
  openssl rsa -in privkey.pem -out private.key


  //with CA
  https://github.com/ChristianLempa/cheat-sheets/blob/main/misc/ssl-certs.md
  //CA
  //KEY
  openssl genrsa -aes256 -out ca-key.pem 4096
  openssl req -new -x509 -sha256 -days 365 -key ca-key.pem -out ca.pem
  //cert
  openssl genrsa -out cert-key.pem 4096
  openssl req -new -sha256 -subj "/CN=internal" -key cert-key.pem -out cert.csr
  echo "subjectAltName=DNS:*.internal.com,IP:17.2.2.10" >> extfile.cnf
  openssl x509 -req -sha256 -days 365 -in cert.csr -CA ca.pem -CAkey ca-key.pem -out cert.pem -extfile extfile.cnf -CAcreateserial
  //chain 
  cat cert.pem > chain.pem
  cat ca.pem >> chain.pem
  //convert
  //cert convert
  openssl pkcs12 -export -inkey cert-key.pem -in cert.pem -out cert.pfx
  //chain convert
  openssl pkcs12 -export -inkey cert-key.pem -in chain.pem -out chain.pfx
  //verify
  //cert verify
  openssl verify -CAfile ca.pem -verbose cert.pem
  //chain verify
  openssl verify -CAfile ca.pem -verbose chain.pem


///////Convert pfx to crt and key

  openssl pkcs12 -in cert.pfx -nocerts -out private.key
  openssl pkcs12 -in cert.pfx -clcerts -nokeys -out cert.crt
  openssl rsa -in private.key -out tls.key

// Transfer file to VM 
  scp -r selfca azureuser@172.173.236.10:/home/azureuser/tls
  scp tls.crt azureuser@172.173.236.10:/home/azureuser/tls

## App Gateway
  az network application-gateway root-cert list --gateway-name app-gw -g aks-rg